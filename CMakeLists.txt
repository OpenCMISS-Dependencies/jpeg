
 # ***** BEGIN LICENSE BLOCK *****
 # Version: MPL 1.1/GPL 2.0/LGPL 2.1
 #
 # The contents of this file are subject to the Mozilla Public License Version
 # 1.1 (the "License"); you may not use this file except in compliance with
 # the License. You may obtain a copy of the License at
 # http://www.mozilla.org/MPL/
 #
 # Software distributed under the License is distributed on an "AS IS" basis,
 # WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 # for the specific language governing rights and limitations under the
 # License.
 #
 # The Original Code is cmgui
 #
 # The Initial Developer of the Original Code is
 # Auckland Uniservices Ltd, Auckland, New Zealand.
 # Portions created by the Initial Developer are Copyright (C) 2005
 # the Initial Developer. All Rights Reserved.
 #
 # Contributor(s): 
 #
 # Alternatively, the contents of this file may be used under the terms of
 # either the GNU General Public License Version 2 or later (the "GPL"), or
 # the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 # in which case the provisions of the GPL or the LGPL are applicable instead
 # of those above. If you wish to allow use of your version of this file only
 # under the terms of either the GPL or the LGPL, and not to allow others to
 # use your version of this file under the terms of the MPL, indicate your
 # decision by deleting the provisions above and replace them with the notice
 # and other provisions required by the GPL or the LGPL. If you do not delete
 # the provisions above, a recipient may use your version of this file under
 # the terms of any one of the MPL, the GPL or the LGPL.
 #
 # ***** END LICENSE BLOCK ***** */

# Set the minimum version of cmake required to 2.6
CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )

PROJECT( JPEG_PLUS )

SET( JPEG_MAJOR_VERSION 6 )
SET( JPEG_MINOR_VERSION 2 )
SET( JPEG_PATCH_VERSION 0 )
SET( JPEG_VERSION ${JPEG_MAJOR_VERSION}.${JPEG_MINOR_VERSION}.${JPEG_PATCH_VERSION} )

SET( LIBRARY_TARGET_NAME jpeg )
STRING( TOUPPER ${LIBRARY_TARGET_NAME} UPPERCASE_LIBRARY_TARGET_NAME )
SET( ADDITIONAL_TARGETS CJPEG DJPEG JPEGTRAN RDJPGCOM WRJPGCOM )
FOREACH( ADDITIONAL_TARGET ${ADDITIONAL_TARGETS} )
	STRING( TOLOWER ${ADDITIONAL_TARGET} LOWERCASE_ADDITIONAL_TARGET )
	SET( ${ADDITIONAL_TARGET}_TARGET_NAME ${LOWERCASE_ADDITIONAL_TARGET} )
ENDFOREACH( ADDITIONAL_TARGET ${ADDITIONAL_TAGETS} )

MACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )
	IF( NOT DEFINED ${OPTION_NAME} )
		SET( ${OPTION_NAME} ${OPTION_DEFAULT} )
	ENDIF( NOT DEFINED ${OPTION_NAME} )

	OPTION( ${OPTION_NAME} "${OPTION_STRING}" ${${OPTION_NAME}} )
ENDMACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )

MACRO( CACHE_VAR_WITH_DEFAULT OPTION_NAME OPTION_DEFAULT OPTION_TYPE OPTION_STRING )
	IF( NOT DEFINED ${OPTION_NAME} )
		SET( ${OPTION_NAME} ${OPTION_DEFAULT} )
	ENDIF( NOT DEFINED ${OPTION_NAME} )

	SET( ${OPTION_NAME} "${OPTION_DEFAULT}" CACHE ${OPTION_TYPE} "${OPTION_STRING}" )
ENDMACRO( CACHE_VAR_WITH_DEFAULT OPTION_NAME OPTION_DEFAULT OPTION_TYPE OPTION_STRING )

# Set up library options
# Generic library options
CACHE_VAR_WITH_DEFAULT( ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_TYPE "Release" STRING 
	"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel" )
SET( CMAKE_BUILD_TYPE ${${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_TYPE} CACHE
	INTERNAL "Internalise this variable and manipulate with
	${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_TYPE" FORCE )
CACHE_VAR_WITH_DEFAULT( ${UPPERCASE_LIBRARY_TARGET_NAME}_INSTALL_PREFIX
	"${CMAKE_INSTALL_PREFIX}" PATH 
	"Install path prefix, prepended onto install directories." )
SET( CMAKE_INSTALL_PREFIX ${${UPPERCASE_LIBRARY_TARGET_NAME}_INSTALL_PREFIX}
	CACHE INTERNAL "Internalise this variable and manipulate with
	${UPPERCASE_LIBRARY_TARGET_NAME}_INSTALL_PREFIX" FORCE )
OPTION_WITH_DEFAULT( ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_STATIC_LIB "Build static zlib" TRUE )
OPTION_WITH_DEFAULT( ${UPPERCASE_LIBRARY_TARGET_NAME}_INSTALL_CONFIG "Install a config file for the library" FALSE )

# Specific library options
OPTION_WITH_DEFAULT( ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_CJPEG "Build cjpeg${CMAKE_EXECUTABLE_SUFFIX}" TRUE )
OPTION_WITH_DEFAULT( ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_DJPEG "Build djpeg${CMAKE_EXECUTABLE_SUFFIX}" TRUE )
OPTION_WITH_DEFAULT( ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_JPEGTRAN "Build jpegtran${CMAKE_EXECUTABLE_SUFFIX}" TRUE )
OPTION_WITH_DEFAULT( ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_RDJPGCOM "Build rdjpgcom${CMAKE_EXECUTABLE_SUFFIX}" TRUE )
OPTION_WITH_DEFAULT( ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_WRJPGCOM "Build wrjpgcom${CMAKE_EXECUTABLE_SUFFIX}" TRUE )

FOREACH( ADDITIONAL_TARGET ${ADDITIONAL_TARGETS} )
	IF( NOT ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_${ADDITIONAL_TARGET} )
		SET( EXCLUDE_${ADDITIONAL_TARGET} EXCLUDE_FROM_ALL )
	ENDIF( NOT ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_${ADDITIONAL_TARGET} )
ENDFOREACH( ADDITIONAL_TARGET ${ADDITIONAL_TARGETS} )

IF( MSVC )
	ADD_DEFINITIONS( -D_CRT_SECURE_NO_WARNINGS )
ENDIF( MSVC )
IF( ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_STATIC_LIB )
	SET( LIBRARY_BUILD_TYPE STATIC )
	SET( LIBRARY_INSTALL_TYPE ARCHIVE )
ELSE( ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_STATIC_LIB )
	SET( LIBRARY_BUILD_TYPE SHARED )
	SET( LIBRARY_INSTALL_TYPE LIBRARY )
	IF( WIN32 )
		SET( LIBRARY_INSTALL_TYPE RUNTIME )
	ENDIF( WIN32 )
ENDIF( ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_STATIC_LIB )

IF ( MAC )
	SET( SYSTEM_DEPENDENT_SRCS jmemmac.c )
ELSE( MAC )
	SET( SYSTEM_DEPENDENT_SRCS jmemnobs.c )
ENDIF ( MAC )

SET( LIBRARY_SRCS
	jcapimin.c jcapistd.c jccoefct.c jccolor.c jcdctmgr.c jcdiffct.c jchuff.c
	jcinit.c jclhuff.c jclossls.c jclossy.c jcmainct.c jcmarker.c jcmaster.c
	jcodec.c jcomapi.c jcparam.c jcphuff.c jcpred.c jcprepct.c jcsample.c 
	jcscale.c jcshuff.c jctrans.c jdapimin.c jdapistd.c jdatadst.c jdatasrc.c
	jdcoefct.c jdcolor.c jddctmgr.c jdhuff.c jddiffct.c jdinput.c jdlhuff.c
	jdlossls.c jdlossy.c jdmainct.c jdmarker.c jdmaster.c jdmerge.c jdphuff.c
	jdpostct.c jdpred.c jdsample.c jdscale.c jdshuff.c jdtrans.c jerror.c
	jfdctflt.c jfdctfst.c jfdctint.c jidctflt.c jidctfst.c jidctint.c
	jidctred.c jquant1.c jquant2.c jutils.c jmemmgr.c )
SET( LIBRARY_PUBLIC_HDRS
	jpeglib.h jmorecfg.h jerror.h )
SET( LIBRARY_PRIVATE_HDRS
	jchuff.h jdhuff.h jdct.h jinclude.h jmemsys.h 
	jpegint.h jversion.h cdjpeg.h cderror.h transupp.h )
SET( CJPEG_SRCS
	cjpeg.c cdjpeg.c rdppm.c rdgif.c 
	rdtarga.c rdrle.c rdbmp.c rdswitch.c )
SET( DJPEG_SRCS
	djpeg.c cdjpeg.c wrppm.c wrgif.c 
	wrtarga.c wrrle.c wrbmp.c rdcolmap.c )
SET( JPEGTRAN_SRCS
	jpegtran.c rdswitch.c cdjpeg.c transupp.c )
SET( RDJPGCOM_SRCS
	rdjpgcom.c )
SET( WRJPGCOM_SRCS
	wrjpgcom.c )

SET( CMAKE_DEBUG_POSTFIX d )
SET( CMAKE_MFC_FLAG 0 )

IF( WIN32 AND NOT ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_STATIC_LIB )
	SET( LIBRARY_WIN32_XTRAS 
		libjpeg.def )
ENDIF( WIN32 AND NOT ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_STATIC_LIB )

# Set defines for jconfig.h
SET( JCONFIG_HDR_FILE ${CMAKE_CURRENT_BINARY_DIR}/jconfig.h )
IF( WIN32 )
	CONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/jconfig.vc ${JCONFIG_HDR_FILE} )
ELSE( WIN32 )
	INCLUDE( CheckIncludeFile )
	INCLUDE( CheckSymbolExists )
	INCLUDE( CheckTypeSize )
	CHECK_INCLUDE_FILE( stddef.h HAVE_STDDEF_H )
	CHECK_INCLUDE_FILE( stdlib.h HAVE_STDLIB_H )
	CHECK_INCLUDE_FILE( string.h HAVE_STRING_H )
	CHECK_INCLUDE_FILE( strings.h HAVE_STRINGS_H )
	IF( NOT HAVE_STRING_H AND HAVE_STRINGS_H )
		SET( NEED_BSD_STRINGS 1 )
	ENDIF( NOT HAVE_STRING_H AND HAVE_STRINGS_H )
	CHECK_TYPE_SIZE( size_t HAVE_SIZE_T )
	CHECK_TYPE_SIZE( "unsigned char" HAVE_UNSIGNED_CHAR )
	CHECK_TYPE_SIZE( "unsigned short" HAVE_UNSIGNED_SHORT )
	IF( NOT HAVE_SIZE_T )
		CHECK_SYMBOL_EXISTS( size_t sys/types.h NEED_SYS_TYPES_H )
	ENDIF( NOT HAVE_SIZE_T )
	SET( NEED_SHORT_EXTERNAL_NAMES 0 )
	SET( HAVE_PROTOTYPES 1 )
	CONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/jconfig.cmake ${JCONFIG_HDR_FILE} )
ENDIF( WIN32 )

IF( ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" AND ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64" )
	SET_SOURCE_FILES_PROPERTIES( ${LIBRARY_SRCS} ${SYSTEM_DEPENDENT_SRCS}
		PROPERTIES COMPILE_FLAGS "-fPIC" )
ENDIF( ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" AND ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64" )

INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_BINARY_DIR} )
SET( LIBRARY_PUBLIC_HDRS ${LIBRARY_PUBLIC_HDRS} ${JCONFIG_HDR_FILE} )

ADD_LIBRARY( ${LIBRARY_TARGET_NAME} ${LIBRARY_BUILD_TYPE} ${LIBRARY_SRCS} ${SYSTEM_DEPENDENT_SRCS} ${LIBRARY_PUBLIC_HDRS} ${LIBRARY_PRIVATE_HDRS} ${LIBRARY_WIN32_XTRAS} )
FOREACH( ADDITIONAL_TARGET ${ADDITIONAL_TARGETS} )
	ADD_EXECUTABLE( ${${ADDITIONAL_TARGET}_TARGET_NAME} ${EXCLUDE_${ADDITIONAL_TARGET}} ${${ADDITIONAL_TARGET}_SRCS} )
	TARGET_LINK_LIBRARIES( ${${ADDITIONAL_TARGET}_TARGET_NAME} ${LIBRARY_TARGET_NAME} )
ENDFOREACH( ADDITIONAL_TARGET ${ADDITIONAL_TAGETS} )

IF( WIN32 AND NOT BUILD_STATIC_LIB )
	SET_TARGET_PROPERTIES( ${LIBRARY_TARGET_NAME} PROPERTIES IMPORT_SUFFIX _dll.lib )
	INSTALL( TARGETS ${LIBRARY_TARGET_NAME} ARCHIVE
		DESTINATION lib )
ENDIF( WIN32 AND NOT BUILD_STATIC_LIB )

INSTALL( TARGETS ${LIBRARY_TARGET_NAME} EXPORT ${LIBRARY_TARGET_NAME}-targets ${LIBRARY_INSTALL_TYPE}
	DESTINATION lib )
INSTALL( FILES ${LIBRARY_PUBLIC_HDRS}
	DESTINATION include )
FOREACH( ADDITIONAL_TARGET ${ADDITIONAL_TARGETS} )
	IF( ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_${ADDITIONAL_TARGET} )
		INSTALL( TARGETS ${${ADDITIONAL_TARGET}_TARGET_NAME} RUNTIME DESTINATION bin )
	ENDIF( ${UPPERCASE_LIBRARY_TARGET_NAME}_BUILD_${ADDITIONAL_TARGET} )
ENDFOREACH( ADDITIONAL_TARGET ${ADDITIONAL_TARGETS} )

IF( ${UPPERCASE_LIBRARY_TARGET_NAME}_INSTALL_CONFIG )
	SET( LIBRARY_CONFIG_FILE ${CMAKE_CURRENT_BINARY_DIR}/${LIBRARY_TARGET_NAME}-config.cmake )
	SET( CONFIG_FILE_CONTENTS 
		"\nIF( NOT DEFINED _${UPPERCASE_LIBRARY_TARGET_NAME}_CONFIG_CMAKE )" 
		"\nSET( _${UPPERCASE_LIBRARY_TARGET_NAME}_CONFIG_CMAKE TRUE )" 
	        "\nGET_FILENAME_COMPONENT( SELF_DIR \"\${CMAKE_CURRENT_LIST_FILE}\" PATH )"
	        "\nINCLUDE( \${SELF_DIR}/${LIBRARY_TARGET_NAME}-targets.cmake )"
	        "\nGET_FILENAME_COMPONENT( ${UPPERCASE_LIBRARY_TARGET_NAME}_INCLUDE_DIRS \"\${SELF_DIR}/../../include\" ABSOLUTE )"
	        "\nSET( ${UPPERCASE_LIBRARY_TARGET_NAME}_LIBRARIES ${LIBRARY_TARGET_NAME} )"
	        "\nSET( ${UPPERCASE_LIBRARY_TARGET_NAME}_DEFINITIONS )"
	        "\nSET( ${UPPERCASE_LIBRARY_TARGET_NAME}_FOUND TRUE )" 
		"\nENDIF( NOT DEFINED _${UPPERCASE_LIBRARY_TARGET_NAME}_CONFIG_CMAKE )" 
	        "\n" )
	FILE( WRITE ${LIBRARY_CONFIG_FILE} ${CONFIG_FILE_CONTENTS} )
	INSTALL( FILES ${LIBRARY_CONFIG_FILE} DESTINATION lib/cmake )
	INSTALL( EXPORT ${LIBRARY_TARGET_NAME}-targets 
		DESTINATION lib/cmake )
ENDIF( ${UPPERCASE_LIBRARY_TARGET_NAME}_INSTALL_CONFIG )

